"""
Django settings for marketplace_project project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# --- CORRECTION 1: Chargement conditionnel de .env ---
# Charge les variables du fichier .env UNIQUEMENT si nous ne sommes pas en production.
# Render et d'autres plateformes de déploiement géreront leurs propres variables d'environnement.
if os.environ.get('DJANGO_ENV') != 'production':
    load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# --- CORRECTION 2: SECRET_KEY sans valeur par défaut en production ---
# EN PRODUCTION, la SECRET_KEY DOIT absolument venir d'une variable d'environnement
# et ne jamais avoir de valeur par défaut en dur dans le code.
# Le 'or' avec la valeur par défaut est utile pour le développement si .env n'est pas chargé,
# mais pour la production, supprimez cette valeur par défaut ou assurez-vous qu'elle est bien passée par l'environnement.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY') # Idéalement, pas de valeur par défaut ici.

# SECURITY WARNING: don't run with debug turned on in production!
# --- CORRECTION 3: DEBUG via variable d'environnement ---
# Mettez DEBUG à True si la variable d'environnement 'DEBUG_VALUE' est 'True'.
# Sinon, elle sera False (important pour la production).
DEBUG = os.environ.get('DEBUG_VALUE', 'False') == 'True'


# Allowed hosts for your Django application
# --- CORRECTION 4: ALLOWED_HOSTS dynamique pour production/dev ---
# En production, cette liste devrait inclure les noms de domaine de votre site (ex: 'www.yourmarketplace.com', 'yourmarketplace.com').
# Render ajoutera automatiquement son sous-domaine.
# Pour le développement, on autorise '127.0.0.1' et 'localhost'.
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'boutiques',
    'registration',
    'crispy_forms',
    'crispy_bootstrap5',
    # --- AJOUT OPTIONNEL 1: WhiteNoise pour servir les statics en production ---
    # Si vous voulez que Gunicorn serve les fichiers statiques de Django de manière optimisée.
    # N'oubliez pas de l'installer: pip install whitenoise
    # et d'ajouter 'whitenoise.middleware.WhiteNoiseMiddleware' dans MIDDLEWARE.
    # 'whitenoise.runserver_nostatic', # Utile pour le dev avec WhiteNoise
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # --- AJOUT OPTIONNEL 2: WhiteNoise middleware ---
    # Si vous utilisez WhiteNoise, ajoutez-le ici, juste après SecurityMiddleware.
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'marketplace_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marketplace_project.wsgi.application'


# Database - Configuration pour PostgreSQL
# --- CORRECTION 5: Meilleure gestion des valeurs par défaut pour DB ---
# Les valeurs par défaut ne devraient être utilisées que si elles sont "sûres" (par ex. pour le dev local).
# Sur Render, les variables d'environnement seront toujours définies.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}
# --- AJOUT OPTIONNEL 3: Utiliser DATABASE_URL pour Render ---
# Render peut fournir une seule variable DATABASE_URL pour la connexion.
# Si vous l'utilisez, une bibliothèque comme dj-database-url simplifie les choses:
# pip install dj-database-url
# import dj_database_url
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'),
#         conn_max_age=600 # Optionnel: Gérer les connexions persistantes
#     )
# }
# Avec dj-database-url, vous n'auriez pas besoin de DB_NAME, DB_USER, etc. séparées.


# Password validation
# ... (laissez inchangé) ...

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


# Internationalization
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Africa/Bamako'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
# Ce répertoire stockera tous les fichiers statiques de votre projet pour la production.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# --- AJOUT OPTIONNEL 4: WhiteNoise pour le stockage des statiques en prod ---
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Configuration pour les fichiers médias (images, vidéos téléchargées)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout Redirect URLs
LOGIN_REDIRECT_URL = '/boutiques/vendeur/dashboard/'
LOGOUT_REDIRECT_URL = '/'

